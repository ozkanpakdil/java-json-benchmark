# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.avajejsonb

# Run progress: 0.00% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4461446158493 as seed for Random
653.042 ops/s
Iteration   1: 1159.835 ops/s
Iteration   2: 1185.932 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.avajejsonb":
  1172.884 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.avajejsonb_jackson

# Run progress: 7.14% complete, ETA 00:02:52
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4474657676591 as seed for Random
334.276 ops/s
Iteration   1: 668.246 ops/s
Iteration   2: 713.230 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.avajejsonb_jackson":
  690.738 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.dsljson

# Run progress: 14.29% complete, ETA 00:02:38
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4487897886589 as seed for Random
3358.591 ops/s
Iteration   1: 5626.360 ops/s
Iteration   2: 5333.930 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.dsljson":
  5480.145 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.dsljson_reflection

# Run progress: 21.43% complete, ETA 00:02:25
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4501090040128 as seed for Random
3309.026 ops/s
Iteration   1: 4195.062 ops/s
Iteration   2: 4403.301 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.dsljson_reflection":
  4299.181 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.fastjson

# Run progress: 28.57% complete, ETA 00:02:12
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4514233069961 as seed for Random
445.655 ops/s
Iteration   1: 741.888 ops/s
Iteration   2: 805.718 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.fastjson":
  773.803 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.flexjson

# Run progress: 35.71% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4527516800319 as seed for Random
141.006 ops/s
Iteration   1: 225.631 ops/s
Iteration   2: 266.939 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.flexjson":
  246.285 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.genson

# Run progress: 42.86% complete, ETA 00:01:45
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4540814567105 as seed for Random
639.063 ops/s
Iteration   1: 917.268 ops/s
Iteration   2: 884.303 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.genson":
  900.786 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.gson

# Run progress: 50.00% complete, ETA 00:01:32
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4553984321756 as seed for Random
462.729 ops/s
Iteration   1: 924.151 ops/s
Iteration   2: 901.667 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.gson":
  912.909 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.jackson

# Run progress: 57.14% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4567182208211 as seed for Random
368.147 ops/s
Iteration   1: 728.722 ops/s
Iteration   2: 847.293 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.jackson":
  788.008 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.jackson_afterburner

# Run progress: 64.29% complete, ETA 00:01:06
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4580385998472 as seed for Random
379.201 ops/s
Iteration   1: 746.550 ops/s
Iteration   2: 802.885 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.jackson_afterburner":
  774.717 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.jackson_blackbird

# Run progress: 71.43% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4593565318380 as seed for Random
444.248 ops/s
Iteration   1: 871.221 ops/s
Iteration   2: 945.175 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.jackson_blackbird":
  908.198 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.jodd

# Run progress: 78.57% complete, ETA 00:00:39
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4606710496442 as seed for Random
479.748 ops/s
Iteration   1: 850.930 ops/s
Iteration   2: 828.668 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.jodd":
  839.799 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.logansquare

# Run progress: 85.71% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4619900973152 as seed for Random
228.680 ops/s
Iteration   1: 483.958 ops/s
Iteration   2: 608.690 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.logansquare":
  546.324 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Deserialization.moshi

# Run progress: 92.86% complete, ETA 00:00:13
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4633082976372 as seed for Random
382.417 ops/s
Iteration   1: 794.836 ops/s
Iteration   2: 843.829 ops/s


Result "com.github.fabienrenaud.jjb.databind.Deserialization.moshi":
  819.333 ops/s


# Run complete. Total time: 00:03:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt     Score   Error  Units
Deserialization.avajejsonb           thrpt    2  1172.884          ops/s
Deserialization.avajejsonb_jackson   thrpt    2   690.738          ops/s
Deserialization.dsljson              thrpt    2  5480.145          ops/s
Deserialization.dsljson_reflection   thrpt    2  4299.181          ops/s
Deserialization.fastjson             thrpt    2   773.803          ops/s
Deserialization.flexjson             thrpt    2   246.285          ops/s
Deserialization.genson               thrpt    2   900.786          ops/s
Deserialization.gson                 thrpt    2   912.909          ops/s
Deserialization.jackson              thrpt    2   788.008          ops/s
Deserialization.jackson_afterburner  thrpt    2   774.717          ops/s
Deserialization.jackson_blackbird    thrpt    2   908.198          ops/s
Deserialization.jodd                 thrpt    2   839.799          ops/s
Deserialization.logansquare          thrpt    2   546.324          ops/s
Deserialization.moshi                thrpt    2   819.333          ops/s
