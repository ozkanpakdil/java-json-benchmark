# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb

# Run progress: 0.00% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4647123109412 as seed for Random
294.146 ops/s
Iteration   1: 325.244 ops/s
Iteration   2: 335.681 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb":
  330.462 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson

# Run progress: 7.14% complete, ETA 00:02:55
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4660625814477 as seed for Random
225.243 ops/s
Iteration   1: 287.747 ops/s
Iteration   2: 297.666 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.avajejsonb_jackson":
  292.706 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson

# Run progress: 14.29% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4674101436524 as seed for Random
676.105 ops/s
Iteration   1: 842.801 ops/s
Iteration   2: 869.452 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson":
  856.127 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection

# Run progress: 21.43% complete, ETA 00:02:28
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4687502074533 as seed for Random
596.846 ops/s
Iteration   1: 716.131 ops/s
Iteration   2: 680.613 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.dsljson_reflection":
  698.372 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.fastjson

# Run progress: 28.57% complete, ETA 00:02:14
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4700862461300 as seed for Random
105.189 ops/s
Iteration   1: 138.035 ops/s
Iteration   2: 142.893 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.fastjson":
  140.464 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.flexjson

# Run progress: 35.71% complete, ETA 00:02:01
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4714463734306 as seed for Random
27.523 ops/s
Iteration   1: 24.635 ops/s
Iteration   2: 24.775 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.flexjson":
  24.705 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.genson

# Run progress: 42.86% complete, ETA 00:01:49
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4729161382262 as seed for Random
116.103 ops/s
Iteration   1: 238.452 ops/s
Iteration   2: 247.276 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.genson":
  242.864 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.gson

# Run progress: 50.00% complete, ETA 00:01:35
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4742624032680 as seed for Random
148.408 ops/s
Iteration   1: 230.619 ops/s
Iteration   2: 222.773 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.gson":
  226.696 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson

# Run progress: 57.14% complete, ETA 00:01:21
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4756101433089 as seed for Random
171.091 ops/s
Iteration   1: 224.076 ops/s
Iteration   2: 225.970 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson":
  225.023 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner

# Run progress: 64.29% complete, ETA 00:01:08
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4769511148659 as seed for Random
144.972 ops/s
Iteration   1: 234.561 ops/s
Iteration   2: 222.303 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_afterburner":
  228.432 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird

# Run progress: 71.43% complete, ETA 00:00:54
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4783014332412 as seed for Random
158.169 ops/s
Iteration   1: 224.992 ops/s
Iteration   2: 229.456 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jackson_blackbird":
  227.224 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.jodd

# Run progress: 78.57% complete, ETA 00:00:40
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4796440915407 as seed for Random
43.153 ops/s
Iteration   1: 57.356 ops/s
Iteration   2: 56.549 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.jodd":
  56.953 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.logansquare

# Run progress: 85.71% complete, ETA 00:00:27
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4810358549109 as seed for Random
201.271 ops/s
Iteration   1: 303.785 ops/s
Iteration   2: 278.479 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.logansquare":
  291.132 ops/s


# JMH version: 1.35
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /usr/lib/jvm/temurin-17-jdk-amd64/bin/java
# VM options: -Xms2g -Xmx2g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, 10 s each
# Measurement: 2 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.fabienrenaud.jjb.databind.Serialization.moshi

# Run progress: 92.86% complete, ETA 00:00:13
# Fork: 1 of 1
# Warmup Iteration   1: Using SEED=4823810422736 as seed for Random
112.760 ops/s
Iteration   1: 194.005 ops/s
Iteration   2: 188.387 ops/s


Result "com.github.fabienrenaud.jjb.databind.Serialization.moshi":
  191.196 ops/s


# Run complete. Total time: 00:03:10

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt    Score   Error  Units
Serialization.avajejsonb           thrpt    2  330.462          ops/s
Serialization.avajejsonb_jackson   thrpt    2  292.706          ops/s
Serialization.dsljson              thrpt    2  856.127          ops/s
Serialization.dsljson_reflection   thrpt    2  698.372          ops/s
Serialization.fastjson             thrpt    2  140.464          ops/s
Serialization.flexjson             thrpt    2   24.705          ops/s
Serialization.genson               thrpt    2  242.864          ops/s
Serialization.gson                 thrpt    2  226.696          ops/s
Serialization.jackson              thrpt    2  225.023          ops/s
Serialization.jackson_afterburner  thrpt    2  228.432          ops/s
Serialization.jackson_blackbird    thrpt    2  227.224          ops/s
Serialization.jodd                 thrpt    2   56.953          ops/s
Serialization.logansquare          thrpt    2  291.132          ops/s
Serialization.moshi                thrpt    2  191.196          ops/s
